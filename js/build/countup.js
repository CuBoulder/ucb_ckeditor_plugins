!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CKEditor5=e():(t.CKEditor5=t.CKEditor5||{},t.CKEditor5.countup=e())}(self,(()=>(()=>{var __webpack_modules__=[(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ 1))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.countup/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},t=>{"use strict";t.exports=CKEditor5.dll},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getRangeText)\n/* harmony export */ });\n// A helper function that retrieves and concatenates all text within the model range.\nfunction getRangeText( range ) {\n\treturn Array.from( range.getItems() ).reduce( ( rangeText, node ) => {\n\t\tif ( !( node.is( 'text' ) || node.is( 'textProxy' ) ) ) {\n\t\t\treturn rangeText;\n\t\t}\n\n\t\treturn rangeText + node.data;\n\t}, '' );\n}\n\n//# sourceURL=webpack://CKEditor5.countup/./ckeditor5_plugins/countup/src/countuputils.js?")},(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ 1))("./src/utils.js");\n\n//# sourceURL=webpack://CKEditor5.countup/delegated_./utils.js_from_dll-reference_CKEditor5.dll?')},(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ 1))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.countup/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _countup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./countup */ 6);\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n// cSpell:ignore countup\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  Countup: _countup__WEBPACK_IMPORTED_MODULE_0__["default"]\n});\n\n\n//# sourceURL=webpack://CKEditor5.countup/./ckeditor5_plugins/countup/src/index.js?')},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Countup)\n/* harmony export */ });\n/* harmony import */ var _countupediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./countupediting */ 7);\n/* harmony import */ var _countupui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./countupui */ 10);\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n// cSpell:ignore tooltipEditing tooltipUI\n\n// The contents of CountupUI and CountupEditing could be included in this\n// file, but it is recommended to separate these concerns in different files.\n\n\n\n\n// Note that CountupEditing and CountupUI also extend `Plugin`, but these\n  // are not seen as individual plugins by CKEditor 5. CKEditor 5 will only\n  // discover the plugins explicitly exported in index.js.\n  class Countup extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n    static get requires() {\n      return [ _countupediting__WEBPACK_IMPORTED_MODULE_0__["default"], _countupui__WEBPACK_IMPORTED_MODULE_1__["default"] ];\n    }\n  }\n\n//# sourceURL=webpack://CKEditor5.countup/./ckeditor5_plugins/countup/src/countup.js?')},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CountupEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/* harmony import */ var _insertcountupcommand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./insertcountupcommand */ 8);\n\n\n\nclass CountupEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\tinit() {\n\t\tthis._defineSchema();\n\t\tthis._defineConverters();\n\n\t\tthis.editor.commands.add(\n\t\t\t'addCountup', new _insertcountupcommand__WEBPACK_IMPORTED_MODULE_1__[\"default\"]( this.editor )\n\t\t);\n\t}\n\t_defineSchema() {\n\t\tconst schema = this.editor.model.schema;\n\n\t\tschema.register('ucb-countup', {\n\t\t\tisContent: true,\n\t\t  });\n\n    \t// Extend the text node's schema to accept the div attribute.\n\t\tschema.extend( '$text', {\n\t\t\tallowAttributes: [ 'ucb-countup' ]\n\t\t} );\n\t}\n\t_defineConverters() {\n\t\tconst conversion = this.editor.conversion;\n\t\t\n        // Conversion from a model attribute to a view element\n\t\tconversion.for( 'downcast' ).attributeToElement( {\n\t\t\tmodel: 'ucb-countup',\n\n            // Callback function provides access to the model attribute value\n\t\t\t// and the DowncastWriter\n\t\t\tview: ( modelAttributeValue, conversionApi ) => {\n\t\t\t\tconst { writer } = conversionApi;\n\t\t\t\treturn writer.createAttributeElement( 'div', {\n\t\t\t\t\tclass: 'ucb-countup counter'\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\n\t\t// Conversion from a view element to a model attribute\n\t\tconversion.for( 'upcast' ).elementToAttribute( {\n\t\t\tview: {\n\t\t\t\tname: 'div',\n\t\t\t\tclass: 'ucb-countup counter'\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\tkey: 'ucb-countup'\n\t\t\t}\n\t\t} );\n\t}\n}\n\n//# sourceURL=webpack://CKEditor5.countup/./ckeditor5_plugins/countup/src/countupediting.js?")},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CountupCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/* harmony import */ var _ckeditor_ckeditor5_typing_src_utils_findattributerange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ckeditor/ckeditor5-typing/src/utils/findattributerange */ 9);\n/* harmony import */ var _countuputils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./countuputils.js */ 2);\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/utils */ 3);\n\n \t\n\n\n\nclass CountupCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  refresh() {\n  const model = this.editor.model;\n  const selection = model.document.selection;\n  const firstRange = selection.getFirstRange();\n\n  // When the selection is collapsed, the command has a value if the caret is in a countup.\n  if ( firstRange.isCollapsed ) {\n    if ( selection.hasAttribute( 'ucb-countup' ) ) {\n      const attributeValue = selection.getAttribute( 'ucb-countup' );\n\n      // Find the entire range containing the countup under the caret position.\n      const countupRange = (0,_ckeditor_ckeditor5_typing_src_utils_findattributerange__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( selection.getFirstPosition(), 'ucb-countup', attributeValue, model );\n\n      this.value = {\n        div: (0,_countuputils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( countupRange ),\n        range: countupRange\n      };\n    } else {\n      this.value = null;\n    }\n  }\n  // When the selection is not collapsed, the command has a value if the selection contains a subset of a single countup\n  // or an entire countup.\n  else {\n    if ( selection.hasAttribute( 'ucb-countup' ) ) {\n      const attributeValue = selection.getAttribute( 'ucb-countup' );\n\n      // Find the entire range containing the countup under the caret position.\n      const countupRange = (0,_ckeditor_ckeditor5_typing_src_utils_findattributerange__WEBPACK_IMPORTED_MODULE_1__[\"default\"])( selection.getFirstPosition(), 'ucb-countup', attributeValue, model );\n\n      if ( countupRange.containsRange( firstRange, true ) ) {\n        this.value = {\n          div: (0,_countuputils_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])( firstRange ),\n          range: firstRange\n        };\n      } else {\n        this.value = null;\n      }\n    } else {\n      this.value = null;\n    }\n  }\n\n  // The command is enabled when the \"countup\" attribute can be set on the current model selection.\n  this.isEnabled = model.schema.checkAttributeInSelection( selection, 'ucb-countup' );\n}\n\nexecute( { div } ) {\n  const model = this.editor.model;\n  const selection = model.document.selection;\n\n  model.change( writer => {\n    // If selection is collapsed then update the selected countup or insert a new one at the place of caret.\n    if ( selection.isCollapsed ) {\n      // When a collapsed selection is inside text with the \"countup\" attribute, update its number.\n      if ( this.value ) {\n        const { end: positionAfter } = model.insertContent(\n          writer.createText( div ),\n          this.value.range\n        );\n        // Put the selection at the end of the inserted countup.\n        writer.setSelection( positionAfter );\n      }\n      // If the collapsed selection is not in an existing countup, insert a text node with the \"countup\" attribute\n      // in place of the caret. Because the selection is collapsed, the attribute value will be used as a data for text.\n      // If the countup is empty, do not do anything.\n      else if ( div !== '' ) {\n        const firstPosition = selection.getFirstPosition();\n\n        // Collect all attributes of the user selection (could be \"bold\", \"italic\", etc.)\n        const attributes = (0,ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_3__.toMap)( selection.getAttributes() );\n\n        // Put the new attribute to the map of attributes.\n        attributes.set( 'ucb-countup' );\n\n        // Inject the new text node with the countup text with all selection attributes.\n        const { end: positionAfter } = model.insertContent( writer.createText( div, attributes ), firstPosition );\n\n        // Put the selection at the end of the inserted countup. Using an end of a range returned from\n        // insertContent() just in case nodes with the same attributes were merged.\n        writer.setSelection( positionAfter );\n      }\n\n      // Remove the \"countup\" attribute attribute from the selection. It stops adding a new content into the countup\n      // if the user starts to type.\n      writer.removeSelectionAttribute( 'ucb-countup' );\n    } else {\n      // If the selection has non-collapsed ranges, change the attribute on nodes inside those ranges\n      // omitting nodes where the \"countup\" attribute is disallowed.\n      const ranges = model.schema.getValidRanges( selection.getRanges(), 'ucb-countup' );\n\n      for ( const range of ranges ) {\n        writer.setAttribute( 'ucb-countup', range );\n      }\n    }\n  } );\n}\n}\n\n\n//# sourceURL=webpack://CKEditor5.countup/./ckeditor5_plugins/countup/src/insertcountupcommand.js?")},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ findAttributeRange)\n/* harmony export */ });\n/**\n * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/findattributerange\n */\n\n/**\n * Returns a model range that covers all consecutive nodes with the same `attributeName` and its `value`\n * that intersect the given `position`.\n *\n * It can be used e.g. to get the entire range on which the `linkHref` attribute needs to be changed when having a\n * selection inside a link.\n *\n * @param {module:engine/model/position~Position} position The start position.\n * @param {String} attributeName The attribute name.\n * @param {String} value The attribute value.\n * @param {module:engine/model/model~Model} model The model instance.\n * @returns {module:engine/model/range~Range} The link range.\n */\nfunction findAttributeRange( position, attributeName, value, model ) {\n\treturn model.createRange(\n\t\t_findBound( position, attributeName, value, true, model ),\n\t\t_findBound( position, attributeName, value, false, model )\n\t);\n}\n\n// Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same attribute value\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n//\n// @param {module:engine/model/position~Position} position The start position.\n// @param {String} attributeName The attribute name.\n// @param {String} value The attribute value.\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\nfunction _findBound( position, attributeName, value, lookBack, model ) {\n\t// Get node before or after position (depends on `lookBack` flag).\n\t// When position is inside text node then start searching from text node.\n\tlet node = position.textNode || ( lookBack ? position.nodeBefore : position.nodeAfter );\n\n\tlet lastNode = null;\n\n\twhile ( node && node.getAttribute( attributeName ) == value ) {\n\t\tlastNode = node;\n\t\tnode = lookBack ? node.previousSibling : node.nextSibling;\n\t}\n\n\treturn lastNode ? model.createPositionAt( lastNode, lookBack ? 'before' : 'after' ) : position;\n}\n\n\n//# sourceURL=webpack://CKEditor5.countup/./node_modules/@ckeditor/ckeditor5-typing/src/utils/findattributerange.js?")},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CountupUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ 4);\n/* harmony import */ var _countupview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./countupview */ 11);\n/* harmony import */ var _countuputils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./countuputils.js */ 2);\n/* harmony import */ var _icons_countup_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../icons/countup.svg */ 12);\n\n\n\n\n\n\nclass CountupUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\tstatic get requires() {\n\t\treturn [ ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon ];\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\n        // Create the balloon and the form view.\n\t\tthis._balloon = this.editor.plugins.get( ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon );\n\t\tthis.formView = this._createFormView();\n\n\t\teditor.ui.componentFactory.add( 'countup', () => {\n\t\t\tconst button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView();\n\n\t\t\tbutton.label = 'Countup';\n\t\t\tbutton.icon = _icons_countup_svg__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n\t\t\tbutton.tooltip = true;\n\t\t\tbutton.withText = false;\n\t\t\t\n\t\t\t// Show the UI on button click.\n\t\t\tthis.listenTo( button, 'execute', () => {\n\t\t\t\tthis._showUI();\n\t\t\t} );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n\n  \n\n\t_createFormView() {\n\t\tconst editor = this.editor;\n\t\tconst formView = new _countupview__WEBPACK_IMPORTED_MODULE_2__[\"default\"]( editor.locale );\n\n\t\t// Execute the command after clicking the \"Save\" button.\n\t\tthis.listenTo( formView, 'submit', () => {\n\t\t\t// Grab values from the countup input field.\n\t\t\tconst value = {\n\t\t\t\tdiv: formView.divInputView.fieldView.element.value,\n\t\t\t};\n\t\t\teditor.execute( 'addCountup', value );\n\n            // Hide the form view after submit.\n\t\t\tthis._hideUI();\n\t\t} );\n\n\t\t// Hide the form view after clicking the \"Cancel\" button.\n\t\tthis.listenTo( formView, 'cancel', () => {\n\t\t\tthis._hideUI();\n\t\t} );\n\n\t\t// Hide the form view when clicking outside the balloon.\n\t\t(0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.clickOutsideHandler)( {\n\t\t\temitter: formView,\n\t\t\tactivator: () => this._balloon.visibleView === formView,\n\t\t\tcontextElements: [ this._balloon.view.element ],\n\t\t\tcallback: () => this._hideUI()\n\t\t} );\n\n\t\treturn formView;\n\t}\n\n\t_showUI() {\n\t\tconst selection = this.editor.model.document.selection;\n\n\t\t// Check the value of the command.\n\t\tconst commandValue = this.editor.commands.get( 'addCountup' ).value;\n\n\t\tthis._balloon.add( {\n\t\t\tview: this.formView,\n\t\t\tposition: this._getBalloonPositionData()\n\t\t} );\n\n\t\t// Disable the input when the selection is not collapsed.\n\t\tthis.formView.divInputView.isEnabled = selection.getFirstRange().isCollapsed;\n\n\t\t// Fill the form using the state (value) of the command.\n\t\tif ( commandValue ) {\n\t\t\tthis.formView.divInputView.fieldView.value = commandValue.div;\n\t\t}\n\t\t// If the command has no value, put the currently selected text (not collapsed)\n\t\t// in the first field and empty the second in that case.\n\t\telse {\n\t\t\tconst selectedText = (0,_countuputils_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])( selection.getFirstRange() );\n\n\t\t\tthis.formView.divInputView.fieldView.value = selectedText;\n\t\t}\n\n\t\tthis.formView.focus();\n\t}\n\n\t_hideUI() {\n\t\t// Clear the input field values and reset the form.\n\t\tthis.formView.divInputView.fieldView.value = '';\n\t\tthis.formView.element.reset();\n\n\t\tthis._balloon.remove( this.formView );\n\n\t\t// Focus the editing view after inserting the countup so the user can start typing the content\n\t\t// right away and keep the editor focused.\n\t\tthis.editor.editing.view.focus();\n\t}\n\n\t_getBalloonPositionData() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tlet target = null;\n\n\t\t// Set a target position by converting view selection range to DOM\n\t\ttarget = () => view.domConverter.viewRangeToDom( viewDocument.selection.getFirstRange() );\n\n\t\treturn {\n\t\t\ttarget\n\t\t};\n\t}\n}\n\n//# sourceURL=webpack://CKEditor5.countup/./ckeditor5_plugins/countup/src/countupui.js?")},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ 4);\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/utils */ 3);\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n\n\n\n\nclass FormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tthis.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.FocusTracker();\n\t\tthis.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_1__.KeystrokeHandler();\n\n\t\tthis.divInputView = this._createInput( 'Add Number' );\n\n\t\tthis.saveButtonView = this._createButton( 'Save', ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.check, 'ck-button-save' );\n\n\t\t// Submit type of the button will trigger the submit event on entire form when clicked \n\t\t//(see submitHandler() in render() below).\n\t\tthis.saveButtonView.type = 'submit';\n\n\t\tthis.cancelButtonView = this._createButton( 'Cancel', ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.cancel, 'ck-button-cancel' );\n\n\t\t// Delegate ButtonView#execute to FormView#cancel.\n\t\tthis.cancelButtonView.delegate( 'execute' ).to( this, 'cancel' );\n\n\t\tthis.childViews = this.createCollection( [\n\t\t\tthis.divInputView,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t] );\n\n\t\tthis._focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.FocusCycler( {\n\t\t\tfocusables: this.childViews,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusPrevious: 'shift + tab',\n\n\t\t\t\t// Navigate form fields forwards using the Tab key.\n\t\t\t\tfocusNext: 'tab'\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: [ 'ck', 'ck-countup-form' ],\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: this.childViews\n\t\t} );\n\t}\n\n\trender() {\n\t\tsuper.render();\n\n\t\t(0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.submitHandler)( {\n\t\t\tview: this\n\t\t} );\n\n\t\tthis.childViews._items.forEach( view => {\n\t\t\t// Register the view in the focus tracker.\n\t\t\tthis.focusTracker.add( view.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tthis.focusTracker.destroy();\n\t\tthis.keystrokes.destroy();\n\t}\n\n\tfocus() {\n\t\t// If the countup text field is enabled, focus it straight away to allow the user to type.\n\t\tif ( this.divInputView.isEnabled ) {\n\t\t\tthis.divInputView.focus();\n\t\t}\n\t}\n\n\t_createInput( label ) {\n\t\tconst labeledInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView( this.locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText );\n\n\t\tlabeledInput.label = label;\n\n\t\treturn labeledInput;\n\t}\n\n\t_createButton( label, icon, className ) {\n\t\tconst button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView();\n\n\t\tbutton.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true,\n\t\t\tclass: className\n\t\t} );\n\n\t\treturn button;\n\t}\n}\n\n//# sourceURL=webpack://CKEditor5.countup/./ckeditor5_plugins/countup/src/countupview.js?")},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 448 512\\">\x3c!--! Font Awesome Pro 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --\x3e<path d=\\"M176 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h16V98.4C92.3 113.8 16 200 16 304c0 114.9 93.1 208 208 208s208-93.1 208-208c0-41.8-12.3-80.7-33.5-113.2l24.1-24.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L355.7 143c-28.1-23-62.2-38.8-99.7-44.6V64h16c17.7 0 32-14.3 32-32s-14.3-32-32-32H176zM288 204c28.7 0 52 23.3 52 52v96c0 28.7-23.3 52-52 52s-52-23.3-52-52V256c0-28.7 23.3-52 52-52zm-12 52v96c0 6.6 5.4 12 12 12s12-5.4 12-12V256c0-6.6-5.4-12-12-12s-12 5.4-12 12zM159.5 244c-5.4 0-10.2 3.5-11.9 8.6l-.6 1.7c-3.5 10.5-14.8 16.1-25.3 12.6s-16.1-14.8-12.6-25.3l.6-1.7c7.2-21.5 27.2-35.9 49.8-35.9c29 0 52.5 23.5 52.5 52.5v2.2c0 13.4-4.9 26.4-13.8 36.4l-39 43.9c-6.2 7-10 15.7-10.9 24.9H192c11 0 20 9 20 20s-9 20-20 20H128c-11 0-20-9-20-20V368.3c0-20.6 7.5-40.4 21.2-55.8l39-43.9c2.4-2.7 3.7-6.2 3.7-9.8v-2.2c0-6.9-5.6-12.5-12.5-12.5z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.countup/./icons/countup.svg?')}],__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(t,e)=>{for(var n in e)__webpack_require__.o(e,n)&&!__webpack_require__.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(5);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));