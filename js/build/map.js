!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CKEditor5=e():(t.CKEditor5=t.CKEditor5||{},t.CKEditor5.map=e())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/map/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ "./js/ckeditor5_plugins/map/src/map.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n// cSpell:ignore map\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ Map: _map__WEBPACK_IMPORTED_MODULE_0__["default"] }); // Only these plugins will be built when running `b map` or `w map`.\n\n\n//# sourceURL=webpack://CKEditor5.map/./js/ckeditor5_plugins/map/src/index.js?')},"./js/ckeditor5_plugins/map/src/insertmapcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertMapCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _mapconfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapconfig */ \"./js/ckeditor5_plugins/map/src/mapconfig.js\");\n/* harmony import */ var _maputils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./maputils */ \"./js/ckeditor5_plugins/map/src/maputils.js\");\n/**\n * @file defines InsertMapCommand, which is executed when the map toolbar button is pressed.\n * \n * @typedef { import('@types/ckeditor__ckeditor5-engine').Element } Element\n * @typedef { import('@types/ckeditor__ckeditor5-engine/src/model/writer').default } Writer\n */\n\n\n\n\n\nclass InsertMapCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n\t/**\n\t * Creates a new InsertMapCommand.\n\t * \n\t * @param {Editor} editor \n\t *   The editor.\n\t */\n\tconstructor(editor) {\n\t\tsuper(editor);\n\t\tthis.set('existingMapSelected', false);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\texecute(options = { value: '', size: _mapconfig__WEBPACK_IMPORTED_MODULE_1__.sizeDefault }) {\n\t\tconst value = options.value.trim(), model = this.editor.model, mapSize = options.size;\n\n\t\tif (!value) return;\n\n\t\tlet mapModel = 'campusMap';\n\t\tlet mapLocation = (0,_maputils__WEBPACK_IMPORTED_MODULE_2__.campusMapURLToLocation)(value); // Converts the user-supplied URL to a location for a Campus Map.\n\t\tif (!mapLocation) {\n\t\t\tmapModel = 'googleMap';\n\t\t\tmapLocation = (0,_maputils__WEBPACK_IMPORTED_MODULE_2__.googleMapURLToLocation)(value); // Converts the user-supplied URL to a location for a Google Map.\n\t\t}\n\t\tif (!mapLocation) return;\n\n\t\tmodel.change((writer) => model.insertContent(writer.createElement(mapModel, { mapLocation, mapSize })));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\trefresh() {\n\t\tconst { model } = this.editor;\n\t\tconst { selection } = model.document;\n\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t// Determine if the cursor (selection) is in a position where adding a\n\t\t// map is permitted. This is based on the schema of the model(s)\n\t\t// currently containing the cursor.\n\t\tconst campusMapAllowedIn = model.schema.findAllowedParent(\n\t\t\tselection.getFirstPosition(),\n\t\t\t'campusMap'\n\t\t);\n\n\t\t// If the cursor is not in a location where a map can be added, return\n\t\t// null so the addition doesn't happen.\n\t\tthis.isEnabled = campusMapAllowedIn !== null;\n\n\t\t// Adds a helpful attribute to get an existing selected map element.\n\t\tthis.existingMapSelected = isMapElement(selectedElement) ? selectedElement : null;\n\t}\n}\n\n/**\n * @param {Element | null} element \n * @returns {boolean}\n *   Whether or not `element` is a map element.\n */\nfunction isMapElement(element) {\n\treturn element && (element.name === 'campusMap' || element.name === 'googleMap');\n}\n\n\n//# sourceURL=webpack://CKEditor5.map/./js/ckeditor5_plugins/map/src/insertmapcommand.js?")},"./js/ckeditor5_plugins/map/src/map.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Map)\n/* harmony export */ });\n/* harmony import */ var _mapediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mapediting */ "./js/ckeditor5_plugins/map/src/mapediting.js");\n/* harmony import */ var _mapui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapui */ "./js/ckeditor5_plugins/map/src/mapui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n// cSpell:ignore mapediting mapui\n\n// The contents of MapUI and MapEditing could be included in this\n// file, but it is recommended to separate these concerns in different files.\n\n\n\n\nclass Map extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n\t// Note that MapEditing and MapUI also extend `Plugin`, but these\n\t// are not seen as individual plugins by CKEditor 5. CKEditor 5 will only\n\t// discover the plugins explicitly exported in index.js.\n\tstatic get requires() {\n\t\treturn [_mapediting__WEBPACK_IMPORTED_MODULE_0__["default"], _mapui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n\t}\n}\n\n\n//# sourceURL=webpack://CKEditor5.map/./js/ckeditor5_plugins/map/src/map.js?')},"./js/ckeditor5_plugins/map/src/mapconfig.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sizeDefault\": () => (/* binding */ sizeDefault),\n/* harmony export */   \"sizeOptions\": () => (/* binding */ sizeOptions)\n/* harmony export */ });\n/**\n * @file defines configuration for the map plugin.\n * \n * @typedef {Object} SelectableOption\n * @property {string} label\n * @property {string?} icon\n * @property {string} className\n */\n\n/** @type {Object<string, SelectableOption>} */\nconst sizeOptions = {\n\tsmall: {\n\t\tlabel: 'Small',\n\t\tclassName: 'ucb-map-size-small'\n\t},\n\tmedium: {\n\t\tlabel: 'Medium',\n\t\tclassName: 'ucb-map-size-medium'\n\t},\n\tlarge: {\n\t\tlabel: 'Large',\n\t\tclassName: 'ucb-map-size-large'\n\t}\n};\n\nconst sizeDefault = 'small';\n\n\n//# sourceURL=webpack://CKEditor5.map/./js/ckeditor5_plugins/map/src/mapconfig.js?")},"./js/ckeditor5_plugins/map/src/mapediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MapEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _mapconfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mapconfig */ \"./js/ckeditor5_plugins/map/src/mapconfig.js\");\n/* harmony import */ var _insertmapcommand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./insertmapcommand */ \"./js/ckeditor5_plugins/map/src/insertmapcommand.js\");\n/* harmony import */ var _maputils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./maputils */ \"./js/ckeditor5_plugins/map/src/maputils.js\");\n/**\n * @file defines schemas, converters, and commands for the map plugin.\n * \n * @typedef { import('./mapconfig').SelectableOption } SelectableOption\n * @typedef { import('@types/ckeditor__ckeditor5-engine').DowncastWriter } DowncastWriter\n * @typedef { import('@types/ckeditor__ckeditor5-engine/src/view/containerelement').default } ContainerElement\n */\n\n\n\n\n\n\n\n\n// cSpell:ignore map insertmapcommand\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with map as this model:\n * <campusMap> </campusMap>\n *\n * Which is converted for the browser/user as this markup\n * <ucb-map class=\"ucb-map ucb-campus-map\"> </ucb-map>\n *\n * This file has the logic for defining the map model, and for how it is\n * converted to standard DOM markup.\n */\nclass MapEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic get requires() {\n\t\treturn [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinit() {\n\t\tthis._defineSchema();\n\t\tthis._defineConverters();\n\t\tthis._defineCommands();\n\t}\n\n\t/*\n\t * This registers the structure that will be seen by CKEditor 5 as\n\t * <campusMap>\n\t * </campusMap>\n\t *\n\t * The logic in _defineConverters() will determine how this is converted to\n\t * markup.\n\t */\n\t_defineSchema() {\n\t\t// Schemas are registered via the central `editor` object.\n\t\tconst schema = this.editor.model.schema;\n\n\t\tschema.register('campusMap', {\n\t\t\t// Behaves like a self-contained object (e.g. an image).\n\t\t\tisObject: true,\n\t\t\t// Allow in places where other blocks are allowed (e.g. directly in the root).\n\t\t\tallowWhere: '$block',\n\t\t\t// Allow the attributes which control the map's alignment, style, and theme.\n\t\t\tallowAttributes: ['mapLocation', 'mapSize'],\n\t\t\t// Disallows any child elements inside the <ucb-map> element.\n\t\t\tallowChildren: false\n\t\t});\n\n\t\tschema.register('googleMap', {\n\t\t\t// Behaves like a self-contained object (e.g. an image).\n\t\t\tisObject: true,\n\t\t\t// Allow in places where other blocks are allowed (e.g. directly in the root).\n\t\t\tallowWhere: '$block',\n\t\t\t// Allow the attributes which control the map's alignment, style, and theme.\n\t\t\tallowAttributes: ['mapLocation', 'mapSize'],\n\t\t\t// Disallows any child elements inside the <ucb-map> element.\n\t\t\tallowChildren: false\n\t\t});\n\t}\n\n\t/**\n\t * Converters determine how CKEditor 5 models are converted into markup and\n\t * vice-versa.\n\t */\n\t_defineConverters() {\n\t\t// Converters are registered via the central editor object.\n\t\tconst conversion = this.editor.conversion;\n\n\t\t// Specifies the location attribute for campus maps.\n\t\tconversion.attributeToAttribute({\n\t\t\tmodel: 'mapLocation',\n\t\t\tview: 'data-map-location'\n\t\t});\n\n\t\t// The size attribute converts to element class names.\n\t\tconversion.attributeToAttribute(buildAttributeToAttributeDefinition('mapSize', _mapconfig__WEBPACK_IMPORTED_MODULE_2__.sizeOptions));\n\n\t\t// Upcast Converters: determine how existing HTML is interpreted by the\n\t\t// editor. These trigger when an editor instance loads.\n\t\t//\n\t\t// If <ucb-map class=\"ucb-map ucb-campus-map\"> is present in the existing markup\n\t\t// processed by CKEditor, then CKEditor recognizes and loads it as a\n\t\t// <campusMap> model.\n\t\tconversion.for('upcast').elementToElement({\n\t\t\tmodel: 'campusMap',\n\t\t\tview: {\n\t\t\t\tname: 'ucb-map',\n\t\t\t\tclasses: ['ucb-map', 'ucb-campus-map']\n\t\t\t}\n\t\t});\n\n\t\t// Upcast Converters: determine how existing HTML is interpreted by the\n\t\t// editor. These trigger when an editor instance loads.\n\t\t//\n\t\t// If <ucb-map class=\"ucb-map ucb-google-map\"> is present in the existing markup\n\t\t// processed by CKEditor, then CKEditor recognizes and loads it as a\n\t\t// <googleMap> model.\n\t\tconversion.for('upcast').elementToElement({\n\t\t\tmodel: 'googleMap',\n\t\t\tview: {\n\t\t\t\tname: 'ucb-map',\n\t\t\t\tclasses: ['ucb-map', 'ucb-google-map']\n\t\t\t}\n\t\t});\n\n\t\t// Data Downcast Converters: converts stored model data into HTML.\n\t\t// These trigger when content is saved.\n\t\t//\n\t\t// Instances of <campusMap> are saved as\n\t\t// <ucb-map class=\"ucb-map ucb-campus-map\"></ucb-map>.\n\t\tconversion.for('dataDowncast').elementToElement({\n\t\t\tmodel: 'campusMap',\n\t\t\tview: (modelElement, { writer: viewWriter }) => createCampusMapView(modelElement, viewWriter)\n\t\t});\n\n\t\t// Data Downcast Converters: converts stored model data into HTML.\n\t\t// These trigger when content is saved.\n\t\t//\n\t\t// Instances of <campusMap> are saved as\n\t\t// <ucb-map class=\"ucb-map ucb-google-map\"></ucb-map>.\n\t\tconversion.for('dataDowncast').elementToElement({\n\t\t\tmodel: 'googleMap',\n\t\t\tview: (modelElement, { writer: viewWriter }) => createGoogleMapView(modelElement, viewWriter)\n\t\t});\n\n\t\t// Editing Downcast Converters. These render the content to the user for\n\t\t// editing, i.e. this determines what gets seen in the editor. These trigger\n\t\t// after the Data Upcast Converters, and are re-triggered any time there\n\t\t// are changes to any of the models' properties.\n\t\t//\n\t\t// Convert the <campusMap> model into a container widget in the editor UI.\n\t\tconversion.for('editingDowncast').elementToElement({\n\t\t\tmodel: 'campusMap',\n\t\t\tview: (modelElement, { writer: viewWriter }) => createCampusMapView(modelElement, viewWriter, true)\n\t\t});\n\n\t\t// Editing Downcast Converters. These render the content to the user for\n\t\t// editing, i.e. this determines what gets seen in the editor. These trigger\n\t\t// after the Data Upcast Converters, and are re-triggered any time there\n\t\t// are changes to any of the models' properties.\n\t\t//\n\t\t// Convert the <googleMap> model into a container widget in the editor UI.\n\t\tconversion.for('editingDowncast').elementToElement({\n\t\t\tmodel: 'googleMap',\n\t\t\tview: (modelElement, { writer: viewWriter }) => createGoogleMapView(modelElement, viewWriter, true)\n\t\t});\n\t}\n\n\t/**\n\t * Defines the commands for inserting or modifying the map.\n\t */\n\t_defineCommands() {\n\t\tconst commands = this.editor.commands;\n\t\tcommands.add('insertMap', new _insertmapcommand__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.editor));\n\t}\n}\n\n/**\n * @param {string} attributeName \n *   The attribute name.\n * @param {Object<string, SelectableOption>} attributeOptions\n *   The options avaliable for the attribute.\n * @returns \n *   The attribute to attribute definition of the specified attribute.\n */\nfunction buildAttributeToAttributeDefinition(attributeName, attributeOptions) {\n\tconst view = {};\n\tfor (const [name, option] of Object.entries(attributeOptions))\n\t\tview[name] = { key: 'class', value: option.className };\n\treturn {\n\t\tmodel: {\n\t\t\tkey: attributeName,\n\t\t\tvalues: Object.keys(attributeOptions)\n\t\t},\n\t\tview\n\t};\n}\n\n/**\n * @param {Element} modelElement\n *   The element which contains the campusMap model.\n * @param {DowncastWriter} downcastWriter\n *   The downcast writer.\n * @param {boolean} [widget=false]\n *   Whether or not to return a widget for editing. Defaults to `false`.\n * @returns {ContainerElement}\n *   The Campus Map element or widget.\n */\nfunction createCampusMapView(modelElement, downcastWriter, widget = false) {\n\tif (widget) {\n\t\tconst mapLocation = modelElement.getAttribute('mapLocation');\n\t\treturn (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(downcastWriter.createContainerElement('div',\n\t\t\t{\n\t\t\t\tclass: 'ucb-map ucb-campus-map',\n\t\t\t\tstyle: `background-image: url('https://staticmap.concept3d.com/map/static-map/?map=336&loc=${mapLocation}')`\n\t\t\t}, [\n\t\t\tdowncastWriter.createRawElement('a', {\n\t\t\t\thref: (0,_maputils__WEBPACK_IMPORTED_MODULE_4__.campusMapLocationToURL)(mapLocation)\n\t\t\t}, element => {\n\t\t\t\telement.innerHTML = '<span>View location on the Campus Map</span>';\n\t\t\t\telement.onclick = ev => ev.preventDefault(); // Prevents following the link when clicking the widget.\n\t\t\t})\n\t\t]), downcastWriter, { label: 'map widget' });\n\t}\n\treturn downcastWriter.createContainerElement('ucb-map', { class: 'ucb-map ucb-campus-map' });\n}\n\n/**\n * @param {Element} modelElement\n *   The element which contains the googleMap model.\n * @param {DowncastWriter} downcastWriter\n *   The downcast writer.\n * @param {boolean} [widget=false]\n *   Whether or not to return a widget for editing. Defaults to `false`.\n * @returns {ContainerElement}\n *   The Google Maps element or widget.\n */\n function createGoogleMapView(modelElement, downcastWriter, widget = false) {\n\tif (widget) {\n\t\tconst mapLocation = modelElement.getAttribute('mapLocation');\n\t\treturn (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(downcastWriter.createContainerElement('div',\n\t\t\t{\n\t\t\t\tclass: 'ucb-map ucb-google-map',\n\t\t\t}, [\n\t\t\tdowncastWriter.createEmptyElement('iframe', {\n\t\t\t\tsrc: (0,_maputils__WEBPACK_IMPORTED_MODULE_4__.googleMapLocationToURL)(mapLocation),\n\t\t\t\tloading: 'lazy',\n\t\t\t\treferrerpolicy: 'no-referrer'\n\t\t\t}),\n\t\t\tdowncastWriter.createEmptyElement('div', {\n\t\t\t\tclass: 'ucb-map-editing-cover'\n\t\t\t})\n\t\t]), downcastWriter, { label: 'map widget' });\n\t}\n\treturn downcastWriter.createContainerElement('ucb-map', { class: 'ucb-map ucb-google-map' });\n}\n\n\n//# sourceURL=webpack://CKEditor5.map/./js/ckeditor5_plugins/map/src/mapediting.js?")},"./js/ckeditor5_plugins/map/src/mapformview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MapFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var _mapconfig__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mapconfig */ \"./js/ckeditor5_plugins/map/src/mapconfig.js\");\n/**\n * @file contains the map MapFormView.\n * \n * @typedef { import('@types/ckeditor__ckeditor5-utils').Locale } Locale\n * @typedef { import('@types/ckeditor__ckeditor5-core').Command } Command\n * @typedef { import('@types/ckeditor__ckeditor5-ui/src/dropdown/dropdownview').default } DropdownView\n * @typedef { import('@types/ckeditor__ckeditor5-core/src/editor/editorwithui').EditorWithUI } EditorWithUI\n * @typedef { import('./mapconfig').SelectableOption } SelectableOption\n */\n\n\n\n\n\n\nclass MapFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.View {\n\t/**\n\t * Creates a new MapFormView.\n\t * \n\t * @param {Locale} locale\n\t *   The locale.\n\t */\n\tconstructor(locale) {\n\t\tsuper(locale);\n\n\t\t// Creates the main input field.\n\t\tthis.valueInputView = this._createInput(locale, 'Map embed');\n\t\tthis.set('value', '');\n\t\tthis.valueInputView.fieldView.bind('value').to(this, 'value');\n\n\t\t// Creates the size selector.\n\t\tthis.sizeDropdownView = this._createSelectionDropdown(locale, 'Map size', null, 'size', _mapconfig__WEBPACK_IMPORTED_MODULE_3__.sizeOptions, _mapconfig__WEBPACK_IMPORTED_MODULE_3__.sizeDefault);\n\t\tthis.set('size', _mapconfig__WEBPACK_IMPORTED_MODULE_3__.sizeDefault);\n\n\t\t// Creates the save and cancel buttons.\n\t\tthis.saveButtonView = this._createActionButton(locale, 'Save', ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.check, 'ck-button-save');\n\t\tthis.cancelButtonView = this._createActionButton(locale, 'Cancel', ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.icons.cancel, 'ck-button-cancel');\n\n\t\tthis.saveButtonView.type = 'submit'; // Set the type to 'submit', which will trigger the submit event on entire form when clicked.\n\t\tthis.cancelButtonView.delegate('execute').to(this, 'cancel'); // Delegate ButtonView#execute to MapFormView#cancel.\n\n\t\tthis.childViews = this.createCollection([\n\t\t\tthis.valueInputView,\n\t\t\tthis.sizeDropdownView,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t]);\n\n\t\tthis._enableFocusTracking();\n\n\t\tthis.setTemplate({\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\tclass: ['ck', 'ck-map-form'],\n\t\t\t\ttabindex: '-1'\n\t\t\t},\n\t\t\tchildren: this.childViews\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Registers the child elements to be tracked by the focus tracker instance.\n\t\tfor (const view of this.childViews)\n\t\t\tthis.focusTracker.add(view.element);\n\n\t\t// Submit the form when the user clicked the save button or pressed enter in the input.\n\t\t(0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.submitHandler)({\n\t\t\tview: this\n\t\t});\n\n\t\t// Start listening for the keystrokes coming from #element, which will allow the #focusCycler to handle the keyboard navigation.\n\t\tthis.keystrokes.listenTo(this.element);\n\t}\n\n\tfocus() {\n\t\tthis.valueInputView.focus();\n\t}\n\n\treset() {\n\t\tthis.value = '';\n\t\tthis.size = _mapconfig__WEBPACK_IMPORTED_MODULE_3__.sizeDefault;\n\t\tthis.valueInputView.fieldView.element.blur(); // Fixes a bug where the value field focus event doesn't fire after dismissing with the Escape key.\n\t\tthis.element.reset();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tdestroy() {\n\t\t// Stop listening to all keystrokes when the view is destroyed.\n\t\tthis.keystrokes.destroy();\n\t}\n\n\n\t/**\n\t * Creates a selection dropdown with multiple buttons.\n\t * \n\t * @param {Locale} locale\n\t *   The locale.\n\t * @param {string} tooltip\n\t *   The dropdown's tooltip.\n\t * @param {string | null} icon\n\t *   The dropdowns's icon (optional). If `null`, the dropdown will display as text.\n\t * @param {string} attribute\n\t *   The attribute to set when one of the buttons is pushed.\n\t * @param {Object<string, SelectableOption>} options\n\t *   The options for buttons in this dropdown view.\n\t * @param {string} defaultValue\n\t *   The default value of the attribute.\n\t * @returns {DropdownView}\n\t *   The dropdown.\n\t */\n\t_createSelectionDropdown(locale, tooltip, icon, attribute, options, defaultValue) {\n\t\tconst dropdownView = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createDropdown)(locale), defaultOption = options[defaultValue];\n\t\t(0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.addToolbarToDropdown)(dropdownView, Object.entries(options).map(([optionValue, option]) => this._createSelectableButton(locale, option.label, option.icon, attribute, optionValue)));\n\t\tdropdownView.buttonView.set({\n\t\t\ticon,\n\t\t\ttooltip: locale.t(tooltip),\n\t\t\twithText: !icon\n\t\t});\n\t\tdropdownView.buttonView.bind('label').to(this, attribute, value => locale.t(options[value] ? options[value].label : defaultOption.label));\n\t\tif (icon === options[defaultValue].icon) // If the icon for the dropdown is the same as the icon for the default option, it changes to reflect the current selection.\n\t\t\tdropdownView.buttonView.bind('icon').to(this, attribute, value => options[value] ? options[value].icon : defaultOption.icon);\n\t\treturn dropdownView;\n\t}\n\n\t/**\n\t * @param {Locale} locale\n\t *   The locale.\n\t * @param {string} label\n\t *   The button's label.\n\t * @param {string | null} icon\n\t *   The button's icon (optional). If `null`, the button will display as text.\n\t * @param {string} attribute\n\t *   The attribute to set when the button is pushed.\n\t * @param {string} value\n\t *   The value to set the attribute to when the button is pushed.\n\t * @returns {ButtonView}\n\t *   A selectable button with the specified parameters.\n\t */\n\t_createSelectableButton(locale, label, icon, attribute, value) {\n\t\tconst buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView();\n\t\tbuttonView.set({\n\t\t\tlabel: locale.t(label),\n\t\t\ticon,\n\t\t\ttooltip: !!icon, // Displays the tooltip on hover if there is an icon\n\t\t\tisToggleable: true, // Allows the button with the attribute's current value to display as selected\n\t\t\twithText: !icon // Displays the button as text if the icon is falsey\n\t\t});\n\t\t// Allows the button with the attribute's current value to display as selected\n\t\tbuttonView.bind('isOn').to(this, attribute, attributeValue => attributeValue === value);\n\t\t// Sets the attribute to the button's value on click\n\t\tthis.listenTo(buttonView, 'execute', () => {\n\t\t\tthis.set(attribute, value);\n\t\t});\n\t\treturn buttonView;\n\t}\n\n\t/**\n\t * @param {Locale} locale\n\t *   The locale.\n\t * @param {string} label\n\t *   The button's label.\n\t * @param {string | null} icon\n\t *   The button's icon (optional). If `null`, the button will display as text.\n\t * @param {string | string[] | null} className\n\t *   The button's CSS classes (optional).\n\t * @returns {ButtonView}\n\t *   An action button with the specified parameters. No actions are bound yet and must be bound afteward.\n\t */\n\t_createActionButton(locale, label, icon, className) {\n\t\tconst buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView();\n\t\tbuttonView.set({\n\t\t\tlabel: locale.t(label),\n\t\t\ticon,\n\t\t\tclass: className,\n\t\t\ttooltip: !!icon, // Displays the tooltip on hover if there is an icon\n\t\t\twithText: !icon // Displays the button as text if the icon is falsey\n\t\t});\n\t\treturn buttonView;\n\t}\n\n\t/**\n\t * @param {Locale} locale\n\t *   The locale.\n\t * @param {string} label\n\t *   The input's label.\n\t * @returns {LabeledFieldView}\n\t */\n\t_createInput(locale, label) {\n\t\tconst labeledInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.LabeledFieldView(locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.createLabeledInputText);\n\t\tlabeledInput.label = locale.t(label);\n\t\treturn labeledInput;\n\t}\n\n\t/**\n\t * Enables focus tracking / keyboard focus cycling.\n\t * \n\t * @see https://ckeditor.com/docs/ckeditor5/latest/framework/deep-dive/ui/focus-tracking.html\n\t */\n\t_enableFocusTracking() {\n\t\t// Creates the focus tracker and keystroke handler.\n\t\tthis.focusTracker = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.FocusTracker();\n\t\tthis.keystrokes = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_0__.KeystrokeHandler();\n\n\t\t// Performs the \"Select All\" action automatically whenever the value input field is focused.\n\t\t// Users typically won't need to edit the value but will instead replace the entire contents with a pasted URL or embed code.\n\t\tthis.focusTracker.on('change:focusedElement', (evt, data, focusedElement) => {\n\t\t\tif (focusedElement === this.valueInputView.element)\n\t\t\t\tthis.valueInputView.fieldView.element.select();\n\t\t});\n\n\t\t// Creates the keyboard focus cycler.\n\t\tthis.focusCycler = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.FocusCycler({\n\t\t\tfocusables: this.childViews,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\tfocusPrevious: 'shift + tab', // Navigate form fields backwards using the Shift + Tab keystroke.\n\t\t\t\tfocusNext: 'tab' // Navigate form fields forwards using the Tab key.\n\t\t\t}\n\t\t});\n\t}\n}\n\n\n//# sourceURL=webpack://CKEditor5.map/./js/ckeditor5_plugins/map/src/mapformview.js?")},"./js/ckeditor5_plugins/map/src/mapui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MapUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _mapformview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mapformview */ \"./js/ckeditor5_plugins/map/src/mapformview.js\");\n/* harmony import */ var _icons_map_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../icons/map.svg */ \"./icons/map.svg\");\n/* harmony import */ var _maputils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./maputils */ \"./js/ckeditor5_plugins/map/src/maputils.js\");\n/**\n * @file registers the map toolbar button and binds functionality to it.\n * \n * @typedef { import('@types/ckeditor__ckeditor5-utils').Locale } Locale\n * @typedef { import('@types/ckeditor__ckeditor5-core').Command } Command\n * @typedef { import('@types/ckeditor__ckeditor5-core/src/editor/editorwithui').EditorWithUI } EditorWithUI\n * @typedef { import('@types/ckeditor__ckeditor5-engine').Element } Element\n * @typedef { import('./insertmapcommand').default } InsertMapCommand\n */\n\n\n\n\n\n\n\nclass MapUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\t/**\n\t * @inheritdoc\n\t */\n\tstatic get requires() {\n\t\treturn [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon];\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinit() {\n\t\t/** @type {EditorWithUI} */\n\t\tconst editor = this.editor;\n\t\t/** @type {InsertMapCommand} */\n\t\tconst insertMapCommand = editor.commands.get('insertMap');\n\t\tconst viewDocument = editor.editing.view.document;\n\t\tconst componentFactory = editor.ui.componentFactory;\n\n\t\t// Create the balloon and the form view.\n\t\tthis._balloon = editor.plugins.get(ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon);\n\t\tthis.formView = this._createFormView(editor.locale);\n\n\t\t// This will register the map toolbar button.\n\t\tcomponentFactory.add('map', (locale) => {\n\t\t\tconst buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n\t\t\t// Create the toolbar button.\n\t\t\tbuttonView.set({\n\t\t\t\tlabel: locale.t('Map'),\n\t\t\t\ticon: _icons_map_svg__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n\t\t\t\ttooltip: true,\n\t\t\t\tisToggleable: true\n\t\t\t});\n\n\t\t\t// Bind the state of the button to the command.\n\t\t\tbuttonView.bind('isEnabled').to(insertMapCommand, 'isEnabled');\n\t\t\tbuttonView.bind('isOn').to(insertMapCommand, 'existingMapSelected');\n\n\t\t\t// Shows the UI on \"Map\" toolbar button click.\n\t\t\tthis.listenTo(buttonView, 'execute', () => {\n\t\t\t\tthis._showUI(insertMapCommand.existingMapSelected);\n\t\t\t});\n\n\t\t\t// Shows the UI on click of a map widget.\n\t\t\tthis.listenTo(viewDocument, 'click', () => {\n\t\t\t\tif (insertMapCommand.existingMapSelected)\n\t\t\t\t\tthis._showUI(insertMapCommand.existingMapSelected);\n\t\t\t});\n\n\t\t\treturn buttonView;\n\t\t});\n\t}\n\n\t/**\n\t * @param {Locale} locale \n\t * @returns {MapFormView}\n\t *   The map creation form view.\n\t */\n\t_createFormView(locale) {\n\t\tconst editor = this.editor;\n\t\tconst formView = new _mapformview__WEBPACK_IMPORTED_MODULE_2__[\"default\"](locale);\n\n\t\t// Execute the command after clicking the \"Save\" button.\n\t\tthis.listenTo(formView, 'submit', () => {\n\t\t\teditor.execute('insertMap', { value: formView.valueInputView.fieldView.element.value, size: formView.size });\n\t\t\tthis._hideUI();\n\t\t});\n\n\t\t// Hide the form view after clicking the \"Cancel\" button.\n\t\tthis.listenTo(formView, 'cancel', () => this._hideUI());\n\n\t\t// Hide the form view when clicking outside the balloon.\n\t\t(0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.clickOutsideHandler)({\n\t\t\temitter: formView,\n\t\t\tactivator: () => this._balloon.visibleView === formView,\n\t\t\tcontextElements: [this._balloon.view.element],\n\t\t\tcallback: () => this._hideUI()\n\t\t});\n\n\t\t// Close the panel on esc key press when the form has focus.\n\t\tformView.keystrokes.set('Esc', (data, cancel) => {\n\t\t\tthis._hideUI();\n\t\t\tcancel();\n\t\t});\n\n\t\treturn formView;\n\t}\n\n\t/**\n\t * @param {Element | null} selectedMap \n\t */\n\t_showUI(selectedMap) {\n\t\tthis._balloon.add({\n\t\t\tview: this.formView,\n\t\t\tposition: this._getBalloonPositionData()\n\t\t});\n\t\tif (selectedMap) {\n\t\t\tconst mapLocation = selectedMap.getAttribute('mapLocation');\n\t\t\tif (mapLocation && selectedMap.name === 'campusMap')\n\t\t\t\tthis.formView.value = (0,_maputils__WEBPACK_IMPORTED_MODULE_4__.campusMapLocationToURL)(mapLocation);\n\t\t\telse if (mapLocation && selectedMap.name === 'googleMap')\n\t\t\t\tthis.formView.value = (0,_maputils__WEBPACK_IMPORTED_MODULE_4__.googleMapLocationToURL)(mapLocation);\n\t\t\tthis.formView.size = selectedMap.getAttribute('mapSize');\n\t\t\tthis.editor.model.change(writer => writer.setSelection(selectedMap, 'on')); // Fixes a bug which can cause another map to appear rather than the insert command replacing the existing one.\n\t\t}\n\t\tthis.formView.focus();\n\t}\n\n\t_hideUI() {\n\t\tthis.formView.reset();\n\t\tthis._balloon.remove(this.formView);\n\n\t\t// Focus the editing view after inserting the tooltip so the user can start typing the content right away and keep the editor focused.\n\t\tthis.editor.editing.view.focus();\n\t}\n\n\t_getBalloonPositionData() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\n\t\t// Set a target position by converting view selection range to DOM\n\t\tconst target = () => view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n\n\t\treturn { target };\n\t}\n}\n\n\n//# sourceURL=webpack://CKEditor5.map/./js/ckeditor5_plugins/map/src/mapui.js?")},"./js/ckeditor5_plugins/map/src/maputils.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"campusMapLocationToURL\": () => (/* binding */ campusMapLocationToURL),\n/* harmony export */   \"campusMapURLToLocation\": () => (/* binding */ campusMapURLToLocation),\n/* harmony export */   \"googleMapLocationToURL\": () => (/* binding */ googleMapLocationToURL),\n/* harmony export */   \"googleMapURLToLocation\": () => (/* binding */ googleMapURLToLocation)\n/* harmony export */ });\n/** \n * @file defines helper functions for the map plugin.\n */\n\n/**\n * @param {string} embedCode\n * @returns {string | null}\n *   The `src` of the embedded `<iframe>`, or `null` if there isn't one.\n */\nfunction embedCodeToURL(embedCode) {\n\tconst iframeElement = new DOMParser().parseFromString(embedCode, 'text/html').querySelector('iframe');\n\tif (iframeElement)\n\t\treturn iframeElement.getAttribute('src');\n\treturn null;\n}\n\n/**\n * @param {string} url\n * @returns {string | null}\n *   Just the location part of the URL, or null if the URL isn't a valid Campus Map URL.\n *   For example, passing the URL `'https://www.colorado.edu/map/?id=336#!m/432490'` returns `'432490'`,\n *   while passing the URL `'https://www.colorado.edu/'` returns `null` as it doesn't link directly to a Campus Map.\n */\nfunction campusMapURLToLocation(url) {\n\tif (url[0] === '<') {\n\t\turl = embedCodeToURL(url); // Gets a URL from a likely embed code.\n\t\tif (!url) return null;\n\t}\n\tlet urlified;\n\ttry {\n\t\turlified = new URL(url);\n\t} catch (e) { return null; }\n\treturn (urlified.hostname === 'colorado.edu' || urlified.hostname === 'www.colorado.edu') && (urlified.pathname === '/map' || urlified.pathname === '/map/') ? urlified.hash.replace(/\\D+/, '') : null;\n}\n\n/**\n * @param {string} url\n * @returns {string | null}\n *   Just the location part of the URL, or null if the URL isn't a valid Google Maps URL.\n */\n function googleMapURLToLocation(url) {\n\tif (url[0] === '<') {\n\t\turl = embedCodeToURL(url); // Gets a URL from a likely embed code.\n\t\tif (!url) return null;\n\t}\n\tlet urlified;\n\ttry {\n\t\turlified = new URL(url);\n\t} catch (e) { return null; }\n\treturn (urlified.hostname === 'google.com' || urlified.hostname === 'www.google.com') && (urlified.pathname === '/maps/embed' || urlified.pathname === '/maps/embed/') ? decodeURIComponent(urlified.searchParams.get('pb') || '') || null : null;\n}\n\n/**\n * @param {string} location\n * @returns {string}\n *   The entire Campus Map URL when given just the location.\n *   For example, passing the location `'432490'` returns `'https://www.colorado.edu/map/?id=336#!m/432490'`.\n */\nfunction campusMapLocationToURL(location) {\n\tlocation = location.replace(/\\D/g, '');\n\treturn 'https://www.colorado.edu/map/?id=336' + (location ? '#!m/' + location : '');\n}\n\n/**\n * @param {string} location\n * @returns {string}\n *   The entire Google Maps URL when given just the location.\n */\n function googleMapLocationToURL(location) {\n\treturn 'https://www.google.com/maps/embed?pb=' + encodeURIComponent(location);\n}\n\n\n//# sourceURL=webpack://CKEditor5.map/./js/ckeditor5_plugins/map/src/maputils.js?")},"./icons/map.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 576 512\\">\x3c!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc. --\x3e<path d=\\"M408 120c0 54.6-73.1 151.9-105.2 192c-7.7 9.6-22 9.6-29.6 0C241.1 271.9 168 174.6 168 120C168 53.7 221.7 0 288 0s120 53.7 120 120zm8 80.4c3.5-6.9 6.7-13.8 9.6-20.6c.5-1.2 1-2.5 1.5-3.7l116-46.4C558.9 123.4 576 135 576 152V422.8c0 9.8-6 18.6-15.1 22.3L416 503V200.4zM137.6 138.3c2.4 14.1 7.2 28.3 12.8 41.5c2.9 6.8 6.1 13.7 9.6 20.6V451.8L32.9 502.7C17.1 509 0 497.4 0 480.4V209.6c0-9.8 6-18.6 15.1-22.3l122.6-49zM327.8 332c13.9-17.4 35.7-45.7 56.2-77V504.3L192 449.4V255c20.5 31.3 42.3 59.6 56.2 77c20.5 25.6 59.1 25.6 79.6 0zM288 152a40 40 0 1 0 0-80 40 40 0 1 0 0 80z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.map/./icons/map.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.map/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.map/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/utils.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/utils.js");\n\n//# sourceURL=webpack://CKEditor5.map/delegated_./utils.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.map/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":t=>{"use strict";t.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(t,e)=>{for(var n in e)__webpack_require__.o(e,n)&&!__webpack_require__.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/map/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));