!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.callout=t())}(self,(()=>(()=>{var __webpack_modules__=[(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ 1))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.callout/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},e=>{"use strict";e.exports=CKEditor5.dll},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "defaultSize": () => (/* binding */ defaultSize),\n/* harmony export */   "sizeOptions": () => (/* binding */ sizeOptions)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/**\n * @file defines configuration for the callout plugin.\n * \n * @typedef {Object} SelectableOption\n * @property {string} label\n * @property {string?} icon\n * @property {string} className\n */\n\n\n\n/** @type {Object<string, SelectableOption>} */\nconst sizeOptions = {\n  medium: {\n    label: "Medium",\n    icon: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.small,\n    className: "feature-layout-callout-medium",\n  },\n  large: {\n    label: "Large",\n    icon: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.regular,\n    className: "feature-layout-callout-large",\n  },\n  xlarge: {\n    label: "Extra Large",\n    icon: ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.icons.large,\n    className: "feature-layout-callout-xlarge",\n  },\n};\n\nconst defaultSize = \'medium\'\n\n\n//# sourceURL=webpack://CKEditor5.callout/./ckeditor5_plugins/callout/src/calloutconfig.js?')},(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ 1))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.callout/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _callout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callout */ 5);\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n// cSpell:ignore callout\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ Callout: _callout__WEBPACK_IMPORTED_MODULE_0__["default"] }); // Only these plugins will be built when running `b callout` or `w callout`.\n\n\n//# sourceURL=webpack://CKEditor5.callout/./ckeditor5_plugins/callout/src/index.js?')},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Callout)\n/* harmony export */ });\n/* harmony import */ var _calloutediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calloutediting */ 6);\n/* harmony import */ var _calloutui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calloutui */ 10);\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n// cSpell:ignore calloutediting calloutui\n\n// The contents of CalloutUI and Callout editing could be included in this\n// file, but it is recommended to separate these concerns in different files.\n\n\n\n\nclass Callout extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  // Note that CalloutEditing and CalloutUI also extend `Plugin`, but these\n  // are not seen as individual plugins by CKEditor 5. CKEditor 5 will only\n  // discover the plugins explicitly exported in index.js.\n  static get requires() {\n    return [_calloutediting__WEBPACK_IMPORTED_MODULE_0__["default"], _calloutui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.callout/./ckeditor5_plugins/callout/src/callout.js?')},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CalloutEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ 3);\n/* harmony import */ var _insertcalloutcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertcalloutcommand */ 7);\n/* harmony import */ var ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/engine */ 8);\n/* harmony import */ var _modifycalloutcommand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifycalloutcommand */ 13);\n/* harmony import */ var _calloutconfig__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calloutconfig */ 2);\n/**\n * @file defines schemas, converters, and commands for the callout plugin.\n * \n * @typedef { import('./calloutconfig').SelectableOption } SelectableOption\n * @typedef { import('@ckeditor/ckeditor5-engine').DowncastWriter } DowncastWriter\n * @typedef { import('@ckeditor/ckeditor5-engine/src/view/containerelement').default } ContainerElement\n */\n\n\n\n\n\n\n\n\n\n// cSpell:ignore callout insertcalloutcommand\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with callout as this model:\n * <callout>\n *       <calloutContent></calloutContent>\n * </callout>\n *\n * Which is converted for the browser/user as this markup\n * <div class=\"feature-layout-callout feature-layout-callout-SIZE\">\n *       <div class=\"ucb-callout-content\"></div>\n * </div>\n *\n * This file has the logic for defining the callout model, and for how it is\n * converted to standard DOM markup.\n */\nclass CalloutEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  /**\n   * @inheritdoc\n   */\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  /**\n   * @inheritdoc\n   */\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this._defineCommands();\n  }\n\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register('callout', {\n      // Behaves like a self-contained object (e.g. an image).\n      isObject: true,\n      // Allow in places where other blocks are allowed (e.g. directly in the root).\n      allowWhere: '$block',\n      // Allow the attributes which control the callout's alignment, style, and theme.\n      allowAttributes: ['calloutSize']\n    });\n\n    schema.register('calloutContent', {\n      isLimit: true,\n      allowIn: 'callout',\n      allowContentOf: '$root'\n    });\n\n    schema.addChildCheck((context, childDefinition) => {\n      // Disallow callout inside calloutContent.\n      if (\n        context.endsWith('calloutContent') &&\n        childDefinition.name === 'callout'\n      ) {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion, editing } = this.editor;\n\n    // The size attribute converted to element class names.\n    conversion.attributeToAttribute(buildAttributeToAttributeDefinition('calloutSize', _calloutconfig__WEBPACK_IMPORTED_MODULE_5__.sizeOptions));\n\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <div class=\"feature-layout-callout\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <callout> model.\n    conversion.for('upcast').elementToElement({\n      model: 'callout',\n      view: {\n        name: 'div',\n        classes: 'feature-layout-callout'\n      }\n    });\n\n    // If <div class=\"ucb-callout-content\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <calloutContent> model, provided it is a child element of\n    // <callout>, as required by the schema.\n    conversion.for('upcast').elementToElement({\n      model: 'calloutContent',\n      view: {\n        name: 'div',\n        classes: 'ucb-callout-content'\n      }\n    });\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <callout> are saved as\n    // <div class=\"feature-layout-callout\"></dive>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'callout',\n      view: (modelElement, { writer: viewWriter }) => createCalloutView(viewWriter)\n    });\n\n    // Instances of <calloutContent> are saved as\n    // <div class=\"ucb-callout-content\">{{content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'calloutContent',\n      view: {\n        name: 'div',\n        classes: 'ucb-callout-content'\n      }\n    });\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <callout> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'callout',\n      view: (modelElement, { writer: viewWriter }) => createCalloutView(viewWriter, true)\n    });\n\n    // Convert the <calloutContent> model into an editable <div> widget.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'calloutContent',\n      view: (modelElement, { writer: viewWriter }) => {\n        const div = viewWriter.createEditableElement('div', {\n          class: 'ucb-callout-content',\n        });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, viewWriter);\n      }\n    });\n  }\n\n  /**\n   * Defines the commands for inserting or modifying the callout.\n   */\n  _defineCommands() {\n    const commands = this.editor.commands;\n    commands.add('insertCallout', new _insertcalloutcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor));\n    commands.add('modifyCalloutSize', new _modifycalloutcommand__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.editor, 'calloutSize', _calloutconfig__WEBPACK_IMPORTED_MODULE_5__.defaultSize));\n\n  }\n}\n\n/**\n * @param {string} attributeName \n *   The attribute name.\n * @param {Object<string, SelectableOption>} attributeOptions\n *   The options avaliable for the attribute.\n * @returns \n *   The attribute to attribute definition of the specified attribute.\n */\nfunction buildAttributeToAttributeDefinition(attributeName, attributeOptions) {\n  const view = {};\n  for (const [name, option] of Object.entries(attributeOptions))\n    view[name] = { key: 'class', value: option.className };\n  return {\n    model: {\n      key: attributeName,\n      values: Object.keys(attributeOptions)\n    },\n    view\n  };\n}\n\n/**\n * @param {DowncastWriter} viewWriter\n *   The downcast writer.\n * @param {boolean} [widget=false]\n *   Whether or not to return a widget for editing. Defaults to `false`.\n * @returns {ContainerElement}\n *   The callout container element or widget.\n */\nfunction createCalloutView(viewWriter, widget = false) {\n  const div = viewWriter.createContainerElement('div', { class: 'feature-layout-callout' });\n  return widget ? (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(div, viewWriter, { label: 'callout widget', hasSelectionHandle: true }) : div;\n}\n\n\n//# sourceURL=webpack://CKEditor5.callout/./ckeditor5_plugins/callout/src/calloutediting.js?")},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertCalloutCommand)\n/* harmony export */ });\n/* harmony import */ var _calloutconfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calloutconfig */ 2);\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/**\n * @file defines InsertCalloutCommand, which is executed when the callout toolbar button is pressed.\n * \n * @typedef { import('@ckeditor/ckeditor5-engine').Element } Element\n * @typedef { import('@ckeditor/ckeditor5-engine/src/model/writer').default } Writer\n */\n\n\n\n\nclass InsertCalloutCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.Command {\n  /**\n   * @inheritdoc\n   */\n  execute() {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n      // Insert <callout>*</callout> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createCallout(writer));\n    });\n  }\n\n  /**\n   * @inheritdoc\n   */\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // callout is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      'callout'\n    );\n\n    // If the cursor is not in a location where a callout can be added, return\n    // null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\n/**\n * @param {Writer} writer\n *   The writer used to create and append elements.\n * @returns {Element}\n *   The callout element with all required child elements to match the callout schema.\n */\nfunction createCallout(writer) {\n  // Create instances of the three elements registered with the editor in calloutediting.js.\n  const callout = writer.createElement('callout', { 'calloutSize': 'medium' });\n  const calloutContent = writer.createElement('calloutContent');\n\n  // Append the title and description elements to the callout, which matches\n  // the parent/child relationship as defined in their schemas.\n  writer.append(calloutContent, callout);\n\n  // The calloutDescription text content will automatically be wrapped in a `<p>`.\n  writer.appendElement('paragraph', calloutContent);\n\n  // Return the element to be added to the editor.\n  return callout;\n}\n\n\n//# sourceURL=webpack://CKEditor5.callout/./ckeditor5_plugins/callout/src/insertcalloutcommand.js?")},(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ 1))("./src/engine.js");\n\n//# sourceURL=webpack://CKEditor5.callout/delegated_./engine.js_from_dll-reference_CKEditor5.dll?')},,(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CalloutUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ 11);\n/* harmony import */ var _calloutconfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calloutconfig */ 2);\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/widget */ 3);\n/* harmony import */ var _icons_callout_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../icons/callout.svg */ 12);\n/**\n * @file registers the callout toolbar button and binds functionality to it.\n * \n * @typedef { import('@ckeditor/ckeditor5-utils').Locale } Locale\n * @typedef { import('@ckeditor/ckeditor5-core').Command } Command\n * @typedef { import('@ckeditor/ckeditor5-ui/src/dropdown/dropdownview').default } DropdownView\n * @typedef { import('@ckeditor/ckeditor5-core/src/editor/editorwithui').EditorWithUI } EditorWithUI\n * @typedef { import('./calloutconfig').SelectableOption } SelectableOption\n */\n\n\n\n\n\n\n\nclass CalloutUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  /**\n   * @inheritdoc\n   */\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_3__.WidgetToolbarRepository];\n  }\n\n  /**\n   * @inheritdoc\n   */\n  init() {\n    /** @type {EditorWithUI} */\n    const editor = this.editor,\n      commands = editor.commands,\n      componentFactory = editor.ui.componentFactory;\n\n    // This will register the callout toolbar button.\n    componentFactory.add('callout', (locale) => {\n      const command = commands.get('insertCallout');\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: locale.t('Callout'),\n        icon: _icons_callout_svg__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        tooltip: true\n      });\n\n      // Bind the state of the button to the command.\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => editor.execute('insertCallout'));\n\n      return buttonView;\n    });\n\n    // Makes size options avaliable to the widget toolbar.\n    componentFactory.add('calloutSize', locale =>\n      this._createDropdown(locale, 'Callout size', _calloutconfig__WEBPACK_IMPORTED_MODULE_1__.sizeOptions[_calloutconfig__WEBPACK_IMPORTED_MODULE_1__.defaultSize].icon, commands.get('modifyCalloutSize'), _calloutconfig__WEBPACK_IMPORTED_MODULE_1__.sizeOptions, _calloutconfig__WEBPACK_IMPORTED_MODULE_1__.defaultSize));\n  }\n\n  /**\n   * @inheritdoc\n   */\n  afterInit() {\n    const editor = this.editor;\n    const widgetToolbarRepository = editor.plugins.get(ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_3__.WidgetToolbarRepository);\n    widgetToolbarRepository.register('callout', {\n      items: ['calloutSize'],\n      getRelatedElement: (selection) => {\n        return selection.focus ? selection.focus.getAncestors()\n          .find((node) => node.is('element') && node.hasClass('feature-layout-callout')) : null;\n      }\n    });\n  }\n\n\n  /**\n   * Creates a dropdown with multiple buttons for executing a command.\n   * \n   * @param {Locale} locale\n   *   The locale.\n   * @param {string} label\n   *   The dropdown's label.\n   * @param {string | null} icon\n   *   The dropdowns's icon (optional). If `null`, the dropdown will display as text.\n   * @param {Command} command\n   *   The command to execute when one of the buttons is pushed.\n   * @param {Object<string, SelectableOption>} options\n   *   The options for buttons in this dropdown view.\n   * @param {string} defaultValue\n   *   The default value of the command.\n   * @returns {DropdownView}\n   *   The dropdown.\n   */\n  _createDropdown(locale, label, icon, command, options, defaultValue) {\n    const dropdownView = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createDropdown)(locale);\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.addToolbarToDropdown)(dropdownView, Object.entries(options).map(([optionValue, option]) => this._createButton(locale, option.label, option.icon, command, optionValue)));\n    dropdownView.buttonView.set({\n      label: locale.t(label),\n      icon,\n      tooltip: true,\n      withText: !icon\n    });\n    if (icon === options[defaultValue].icon) // If the icon for the dropdown is the same as the icon for the default option, it changes to reflect the current selection.\n      dropdownView.buttonView.bind('icon').to(command, 'value', value => options[value] ? options[value].icon : options[defaultValue].icon);\n    // Enable button if any of the buttons are enabled.\n    dropdownView.bind('isEnabled').to(command, 'isEnabled');\n    return dropdownView;\n  }\n\n  /**\n   * @param {Locale} locale\n   *   The locale.\n   * @param {string} label\n   *   The button's label.\n   * @param {string | null} icon\n   *   The button's icon (optional). If `null`, the button will display as text.\n   * @param {Command} command\n   *   The command to execute when the button is pushed.\n   * @param {string} value\n   *   The value to send to the command when the button is pushed.\n   * @returns {ButtonView}\n   *   A button with the specified parameters.\n   */\n  _createButton(locale, label, icon, command, value) {\n    const editor = this.editor, buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView();\n    buttonView.set({\n      label: locale.t(label),\n      icon,\n      tooltip: true, // Displays the tooltip on hover\n      isToggleable: true, // Allows the button with the command's current value to display as selected\n      withText: !icon // Displays the button as text if the icon is falsey\n    });\n    // Disables the button if the command is disabled\n    buttonView.bind('isEnabled').to(command);\n    // Allows the button with the command's current value to display as selected\n    buttonView.bind('isOn').to(command, 'value', commandValue => commandValue === value);\n    // Executes the command with the button's value on click\n    this.listenTo(buttonView, 'execute', () => {\n      command.execute({ value });\n      editor.editing.view.focus();\n    });\n    return buttonView;\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.callout/./ckeditor5_plugins/callout/src/calloutui.js?")},(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ 1))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.callout/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 512 512\\">\x3c!--! Font Awesome Pro 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --\x3e<path d=\\"M480 32c0-12.9-7.8-24.6-19.8-29.6s-25.7-2.2-34.9 6.9L381.7 53c-48 48-113.1 75-181 75H192 160 64c-35.3 0-64 28.7-64 64v96c0 35.3 28.7 64 64 64l0 128c0 17.7 14.3 32 32 32h64c17.7 0 32-14.3 32-32V352l8.7 0c67.9 0 133 27 181 75l43.6 43.6c9.2 9.2 22.9 11.9 34.9 6.9s19.8-16.6 19.8-29.6V300.4c18.6-8.8 32-32.5 32-60.4s-13.4-51.6-32-60.4V32zm-64 76.7V240 371.3C357.2 317.8 280.5 288 200.7 288H192V192h8.7c79.8 0 156.5-29.8 215.3-83.3z\\"/></svg>");\n\n//# sourceURL=webpack://CKEditor5.callout/./icons/callout.svg?')},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ModifyCalloutCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ 0);\n/* harmony import */ var _calloututils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calloututils */ 14);\n/** \n * @file defines ModifyCalloutCommand, which is executed to modify attributes of the callout from the widget toolbar.\n * \n * @typedef { import('@ckeditor/ckeditor5-core').Editor } Editor\n */\n\n\n\n\nclass ModifyCalloutCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  /** \n   * The name of the attribute this command modifies.\n   * @type {string}\n   */\n  attributeName\n\n  /**\n   * The default value to set if there isn't one specified.\n   * @type {string}\n   */\n  defaultValue\n\n  /**\n   * Creates a new ModifyCalloutCommand.\n   * @param {Editor} editor \n   *   The editor.\n   * @param {string} attributeName \n   *   The name of the attribute this command modifies.\n   * @param {string} defaultValue \n   *   The default value to set if there isn't one specified.\n   */\n  constructor(editor, attributeName, defaultValue) {\n    super(editor);\n    this.attributeName = attributeName;\n    this.defaultValue = defaultValue;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  refresh() {\n    const model = this.editor.model, callout = (0,_calloututils__WEBPACK_IMPORTED_MODULE_1__.getSelectedCalloutWidget)(model.document.selection), attributeName = this.attributeName, defaultValue = this.defaultValue;\n    this.isEnabled = !!callout; // Disables any ModifyCalloutCommand if there is no selected callout\n    if (this.isEnabled)\n      this.value = callout.getAttribute(attributeName); // Sets the `value` of this ModifyCalloutCommand to the attribute of the selected callout\n    else this.value = defaultValue;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  execute(options = { value: '' }) {\n    const model = this.editor.model, callout = (0,_calloututils__WEBPACK_IMPORTED_MODULE_1__.getSelectedCalloutWidget)(model.document.selection), attributeName = this.attributeName, defaultValue = this.defaultValue;\n    if (callout)\n      model.change(writer => writer.setAttribute(attributeName, options.value || defaultValue, callout)); // Sets the attribute of the selected callout to a new value upon execution of this command\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.callout/./ckeditor5_plugins/callout/src/modifycalloutcommand.js?")},(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSelectedCalloutWidget\": () => (/* binding */ getSelectedCalloutWidget)\n/* harmony export */ });\n/** \n * @file defines helper functions for the callout plugin.\n * \n * @typedef { import('@ckeditor/ckeditor5-engine').Element } Element\n * @typedef { import('@ckeditor/ckeditor5-engine').DocumentSelection } DocumentSelection\n */\n\n/**\n * @param {DocumentSelection} selection \n *   The selection.\n * @returns {Element | null}\n *   The selected callout widget, or null if there isn't one.\n */\nfunction getSelectedCalloutWidget(selection) {\n  const selectionPosition = selection.getFirstPosition();\n  if (!selectionPosition)\n    return null;\n\n  let parent = selectionPosition.parent;\n  while (parent) {\n    if (parent.is('element') && isCalloutWidget(parent))\n      return parent;\n    parent = parent.parent;\n  }\n\n  return null;\n}\n\n/**\n * @param {Element} element \n * @returns {boolean}\n *   Whether the element is a callout widget.\n */\nfunction isCalloutWidget(element) {\n  return element.name === 'callout';\n}\n\n\n//# sourceURL=webpack://CKEditor5.callout/./ckeditor5_plugins/callout/src/calloututils.js?")}],__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(4);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));