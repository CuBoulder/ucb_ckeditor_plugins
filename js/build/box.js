!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.box=t())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/box/src/box.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Box)\n/* harmony export */ });\n/* harmony import */ var _boxediting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./boxediting */ "./js/ckeditor5_plugins/box/src/boxediting.js");\n/* harmony import */ var _boxui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./boxui */ "./js/ckeditor5_plugins/box/src/boxui.js");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/**\n * @file This is what CKEditor refers to as a master (glue) plugin. Its role is\n * just to load the “editing” and “UI” components of this Plugin. Those\n * components could be included in this file, but\n *\n * I.e, this file\'s purpose is to integrate all the separate parts of the plugin\n * before it\'s made discoverable via index.js.\n */\n// cSpell:ignore boxediting boxui\n\n// The contents of BoxUI and Box editing could be included in this\n// file, but it is recommended to separate these concerns in different files.\n\n\n\n\nclass Box extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_2__.Plugin {\n  // Note that BoxEditing and BoxUI also extend `Plugin`, but these\n  // are not seen as individual plugins by CKEditor 5. CKEditor 5 will only\n  // discover the plugins explicitly exported in index.js.\n  static get requires() {\n    return [_boxediting__WEBPACK_IMPORTED_MODULE_0__["default"], _boxui__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.box/./js/ckeditor5_plugins/box/src/box.js?')},"./js/ckeditor5_plugins/box/src/boxediting.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BoxEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _insertboxcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./insertboxcommand */ \"./js/ckeditor5_plugins/box/src/insertboxcommand.js\");\n/* harmony import */ var ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/engine */ \"ckeditor5/src/engine.js\");\n\n\n\n\n\n\n// cSpell:ignore box insertboxcommand\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with box as this model:\n * <box>\n *    <boxTitle></boxTitle>\n *    <boxDescription></boxDescription>\n * </box>\n *\n * Which is converted for the browser/user as this markup\n * <section class=\"ucb-box\">\n *   <div class=\"ucb-box-title\"></div>\n *   <div class=\"ucb-box-description\"></div>\n * </section>\n *\n * This file has the logic for defining the box model, and for how it is\n * converted to standard DOM markup.\n */\nclass BoxEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this.editor.commands.add(\n      'insertBox',\n      new _insertboxcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n\n  /*\n   * This registers the structure that will be seen by CKEditor 5 as\n   * <box>\n   *    <boxTitle></boxTitle>\n   *    <boxDescription></boxDescription>\n   * </box>\n   *\n   * The logic in _defineConverters() will determine how this is converted to\n   * markup.\n   */\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register('box', {\n      // Behaves like a self-contained object (e.g. an image).\n      isObject: true,\n      // Allow in places where other blocks are allowed (e.g. directly in the root).\n      allowWhere: '$block',\n    });\n\n    schema.register('boxTitle', {\n      // This creates a boundary for external actions such as clicking and\n      // and keypress. For example, when the cursor is inside this box, the\n      // keyboard shortcut for \"select all\" will be limited to the contents of\n      // the box.\n      isLimit: true,\n      // This is only to be used within box.\n      allowIn: 'box',\n      // Allow content that is allowed in blocks (e.g. text with attributes).\n      allowContentOf: '$block',\n    });\n\n    schema.register('boxDescription', {\n      isLimit: true,\n      allowIn: 'box',\n      allowContentOf: '$root',\n    });\n\n    schema.addChildCheck((context, childDefinition) => {\n      // Disallow box inside boxDescription.\n      if (\n        context.endsWith('boxDescription') &&\n        childDefinition.name === 'box'\n      ) {\n        return false;\n      }\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion, editing } = this.editor;\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <section class=\"ucb-box\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <box> model.\n    conversion.for('upcast').elementToElement({\n      model: 'box',\n      view: {\n        name: 'section',\n        classes: 'ucb-box',\n      },\n    });\n\n    // If <div class=\"ucb-box-title\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <boxTitle> model, provided it is a child element of <box>,\n    // as required by the schema.\n    conversion.for('upcast').elementToElement({\n      model: 'boxTitle',\n      view: {\n        name: 'div',\n        classes: 'ucb-box-title',\n      },\n    });\n\n    // If <div class=\"ucb-box-description\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <boxDescription> model, provided it is a child element of\n    // <box>, as required by the schema.\n    conversion.for('upcast').elementToElement({\n      model: 'boxDescription',\n      view: {\n        name: 'div',\n        classes: 'ucb-box-description',\n      },\n    });\n\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <box> are saved as\n    // <section class=\"ucb-box\">{{inner content}}</section>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'box',\n      view: {\n        name: 'section',\n        classes: 'ucb-box',\n      },\n    });\n\n    // Instances of <boxTitle> are saved as\n    // <div class=\"ucb-box-title\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'boxTitle',\n      view: {\n        name: 'div',\n        classes: 'ucb-box-title',\n      },\n    });\n\n    // Instances of <boxDescription> are saved as\n    // <div class=\"ucb-box-description\">{{inner content}}</div>.\n    conversion.for('dataDowncast').elementToElement({\n      model: 'boxDescription',\n      view: {\n        name: 'div',\n        classes: 'ucb-box-description',\n      },\n    });\n\n    // Editing Downcast Converters. These render the content to the user for\n    // editing, i.e. this determines what gets seen in the editor. These trigger\n    // after the Data Upcast Converters, and are re-triggered any time there\n    // are changes to any of the models' properties.\n    //\n    // Convert the <box> model into a container widget in the editor UI.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'box',\n      view: (modelElement, { writer: viewWriter }) => {\n        const section = viewWriter.createContainerElement('section', {\n          class: 'ucb-box',\n        });\n\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(section, viewWriter, { label: 'box widget' });\n      },\n    });\n\n    // Convert the <boxTitle> model into an editable <div> widget.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'boxTitle',\n      view: (modelElement, { writer: viewWriter }) => {\n        const div = viewWriter.createEditableElement('div', {\n          class: 'ucb-box-title',\n        });\n        (0,ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_3__.enablePlaceholder)({\n          view: editing.view,\n          element: div,\n          text: 'Title (Optional)'\n        });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, viewWriter);\n      },\n    });\n\n    // Convert the <boxDescription> model into an editable <div> widget.\n    conversion.for('editingDowncast').elementToElement({\n      model: 'boxDescription',\n      view: (modelElement, { writer: viewWriter }) => {\n        const div = viewWriter.createEditableElement('div', {\n          class: 'ucb-box-description',\n        });\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidgetEditable)(div, viewWriter);\n      },\n    });\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.box/./js/ckeditor5_plugins/box/src/boxediting.js?")},"./js/ckeditor5_plugins/box/src/boxformview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BoxFormView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n\n\n\nclass BoxFormView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n\tconstructor(locale) {\n\t\tsuper(locale);\n\t\t// Create the save and cancel buttons.\n\t\tthis.saveButtonView = this._createButton(\n\t\t\t'Save', ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.icons.check, 'ck-button-save'\n\t\t);\n\t\t// Set the type to 'submit', which will trigger\n\t\t// the submit event on entire form when clicked.\n\t\tthis.saveButtonView.type = 'submit';\n\n\t\tthis.cancelButtonView = this._createButton(\n\t\t\t'Cancel', ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.icons.cancel, 'ck-button-cancel'\n\t\t);\n\t\tthis.childViews = this.createCollection([\n\t\t\t// this.abbrInputView,\n\t\t\t// this.titleInputView,\n\t\t\tthis.saveButtonView,\n\t\t\tthis.cancelButtonView\n\t\t]);\n\n\t\tthis.setTemplate({\n\t\t\ttag: 'form',\n\t\t\tattributes: {\n\t\t\t\t// Attributes of a form template.\n\t\t\t\t// ...\n\t\t\t},\n\t\t\tchildren: this.childViews\n\t\t});\n\t}\n\n\trender() {\n\t\tsuper.render();\n\n\t\t// Submit the form when the user clicked the save button\n\t\t// or pressed enter in the input.\n\t\t(0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.submitHandler)({\n\t\t\tview: this\n\t\t});\n\t}\n\n\tfocus() {\n\t\tthis.childViews.first.focus();\n\t}\n\n\t_createInput(label) {\n\t\t// Input initialization.\n\t\t// ...\n\t}\n\n    _createButton( label, icon, className ) {\n        const button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView();\n\n        button.set( {\n            label,\n            icon,\n            tooltip: true,\n            class: className\n        } );\n\n        return button;\n    }\n}\n\n\n//# sourceURL=webpack://CKEditor5.box/./js/ckeditor5_plugins/box/src/boxformview.js?")},"./js/ckeditor5_plugins/box/src/boxui.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BoxUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/engine */ \"ckeditor5/src/engine.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _icons_box_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../icons/box.svg */ \"./icons/box.svg\");\n/* harmony import */ var _boxformview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./boxformview */ \"./js/ckeditor5_plugins/box/src/boxformview.js\");\n/**\n * @file registers the box toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\n\nclass BoxUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n\t/**\n\t * The contextual balloon plugin instance.\n\t * @type {ContextualBalloon}\n\t */\n\t_balloon\n\n\t/**\n\t * The form view displayed inside the balloon.\n\t * @type {BoxFormView}\n\t */\n\tformView\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__.ContextualBalloon];\n\t}\n\n\tinit() {\n\t\tconst editor = this.editor;\n\t\teditor.editing.view.addObserver(ckeditor5_src_engine__WEBPACK_IMPORTED_MODULE_1__.ClickObserver);\n\t\tthis._balloon = editor.plugins.get(ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__.ContextualBalloon);\n\t\tthis.formView = this._createFormView();\n\t\tthis._enableBalloonActivators();\n\n\t\t// This will register the box toolbar button.\n\t\teditor.ui.componentFactory.add('box', (locale) => {\n\t\t\tconst command = editor.commands.get('insertBox');\n\t\t\tconst buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__.ButtonView(locale);\n\n\t\t\t// Create the toolbar button.\n\t\t\tbuttonView.set({\n\t\t\t\tlabel: editor.t('Box'),\n\t\t\t\ticon: _icons_box_svg__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n\t\t\t\ttooltip: true,\n\t\t\t});\n\n\t\t\t// Bind the state of the button to the command.\n\t\t\tbuttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n\t\t\t// Execute the command when the button is clicked (executed).\n\t\t\tthis.listenTo(buttonView, 'execute', () =>\n\t\t\t\teditor.execute('insertBox'),\n\t\t\t);\n\n\t\t\treturn buttonView;\n\t\t});\n\t}\n\n\t_createFormView() {\n\t\tconst editor = this.editor;\n\t\tconst formView = new _boxformview__WEBPACK_IMPORTED_MODULE_4__[\"default\"](editor.locale);\n\t\t// Hide the form view when clicking outside the balloon.\n\t\t(0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__.clickOutsideHandler)({\n\t\t\temitter: formView,\n\t\t\tactivator: () => this._balloon.visibleView === formView,\n\t\t\tcontextElements: [this._balloon.view.element],\n\t\t\tcallback: () => this._hideUI()\n\t\t});\n\t\treturn formView;\n\t}\n\n\t_showUI(box) {\n\t\tthis._balloon.add({\n\t\t\tview: this.formView,\n\t\t\tposition: this._getBalloonPositionData(box)\n\t\t});\n\t}\n\n\t_hideUI() {\n\t\tthis.formView.element.reset();\n\t\tthis._balloon.remove(this.formView);\n\t}\n\n\t_enableBalloonActivators() {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\t\tthis.listenTo(viewDocument, 'click', () => {\n\t\t\tconst view = this.editor.editing.view;\n\t\t\tconst selection = view.document.selection;\n\t\t\tconst element = selection.getSelectedElement();\n\t\t\tconst box = element && element.hasClass('ucb-box') ? element : selection.focus.getAncestors()\n\t\t\t\t.reverse()\n\t\t\t\t.find((node) => node.is('element') && node.hasClass('ucb-box'));\n\t\t\tif (box)\n\t\t\t\tthis._showUI(box);\n\t\t});\n\t}\n\n\t_getBalloonPositionData(box) {\n\t\tconst view = this.editor.editing.view;\n\t\tlet target = null;\n\n\t\t// Set a target position by converting view selection range to DOM.\n\t\ttarget = () => view.domConverter.mapViewToDom(box) ;\n\n\t\treturn {\n\t\t\ttarget\n\t\t};\n\t}\n}\n\n\n//# sourceURL=webpack://CKEditor5.box/./js/ckeditor5_plugins/box/src/boxui.js?")},"./js/ckeditor5_plugins/box/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _box__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./box */ "./js/ckeditor5_plugins/box/src/box.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n// cSpell:ignore box\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  Box: _box__WEBPACK_IMPORTED_MODULE_0__["default"],\n});\n\n\n//# sourceURL=webpack://CKEditor5.box/./js/ckeditor5_plugins/box/src/index.js?')},"./js/ckeditor5_plugins/box/src/insertboxcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertBoxCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertBoxCommand, which is executed when the box\n * toolbar button is pressed.\n */\n// cSpell:ignore boxediting\n\n\n\nclass InsertBoxCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute() {\n    const { model } = this.editor;\n\n    model.change((writer) => {\n      // Insert <box>*</box> at the current selection position\n      // in a way that will result in creating a valid model structure.\n      model.insertContent(createBox(writer));\n    });\n  }\n\n  refresh() {\n    const { model } = this.editor;\n    const { selection } = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // box is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      'box',\n    );\n\n    // If the cursor is not in a location where a box can be added, return\n    // null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n}\n\nfunction createBox(writer) {\n  // Create instances of the three elements registered with the editor in\n  // boxediting.js.\n  const box = writer.createElement('box');\n  const boxTitle = writer.createElement('boxTitle');\n  const boxDescription = writer.createElement('boxDescription');\n\n  // Append the title and description elements to the box, which matches\n  // the parent/child relationship as defined in their schemas.\n  writer.append(boxTitle, box);\n  writer.append(boxDescription, box);\n\n  // The boxDescription text content will automatically be wrapped in a\n  // `<p>`.\n  writer.appendElement('paragraph', boxDescription);\n\n  // Return the element to be added to the editor.\n  return box;\n}\n\n\n//# sourceURL=webpack://CKEditor5.box/./js/ckeditor5_plugins/box/src/insertboxcommand.js?")},"./icons/box.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<svg width=\\"20\\" height=\\"20\\" viewBox=\\"0 0 20 20\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\" d=\\"M1.95154 2.84131C1.95154 2.28902 2.39925 1.84131 2.95154 1.84131H17.0484C17.6007 1.84131 18.0484 2.28902 18.0484 2.84131V17.1588C18.0484 17.7111 17.6007 18.1588 17.0484 18.1588H2.95154C2.39925 18.1588 1.95154 17.7111 1.95154 17.1588V2.84131ZM3.5116 8.10129H16.4926V15.3194C16.4926 15.8717 16.0449 16.3194 15.4926 16.3194H4.5116C3.95931 16.3194 3.5116 15.8717 3.5116 15.3194V8.10129ZM4.44415 3.81676C3.89187 3.81676 3.44415 4.26447 3.44415 4.81676V6.35087H16.4316V4.81676C16.4316 4.26447 15.9838 3.81676 15.4316 3.81676H4.44415Z\\" fill=\\"black\\"/></svg>\\n");\n\n//# sourceURL=webpack://CKEditor5.box/./icons/box.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.box/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/engine.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/engine.js");\n\n//# sourceURL=webpack://CKEditor5.box/delegated_./engine.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.box/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.box/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/box/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));