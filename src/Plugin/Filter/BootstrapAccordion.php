<?php

namespace Drupal\ucb_ckeditor_plugins\Plugin\Filter;

use Drupal\Component\Utility\Html;
use Drupal\filter\FilterProcessResult;
use Drupal\filter\Plugin\FilterBase;

/**
 * Defines a filter used by the Bootstrap Accordion plugin.
 *
 * @Filter(
 *   id = "filter_bootstrap_accordion",
 *   title = @Translation("Accordion enabler"),
 *   description = @Translation("Enables accordions generated by the CKEditor 5 Bootstrap Accordion plugin to work correctly by adding the attributes required by Bootstrap."),
 *   type = Drupal\filter\Plugin\FilterInterface::TYPE_TRANSFORM_IRREVERSIBLE,
 *   weight = 10
 * )
 */
class BootstrapAccordion extends FilterBase {

  /**
   * {@inheritdoc}
   */
  public function process($text, $langcode) {
    $result = new FilterProcessResult($text);

    if (stristr($text, ' data-accordion-id') === FALSE) {
      return $result;
    }

    $dom = Html::load($text);
    $xpath = new \DOMXPath($dom);

    foreach ($xpath->query("//div[@data-accordion-id][contains(concat(' ', @class, ' '), ' accordion ')]") as $accordion) {
      $accordionIdFromAttribute = $accordion->getAttribute('data-accordion-id');
      $accordionId = 'accordion-' . $accordionIdFromAttribute;
      $accordion->setAttribute('id', $accordionId);
      $accordionClasses = $this->getClassesFromElement($accordion);
      $accordionClasses[] = 'accordion-flush';
      $accordion->setAttribute('class', implode(' ', $accordionClasses));
      $accordionItemCount = 1;
      $accordionItemsStayOpen = in_array('accordion-items-stay-open', $accordionClasses);
      foreach ($accordion->childNodes as $accordionItem) {
        if (!($accordionItem instanceof \DOMElement)) {
          continue;
        }
        $accordionItemClasses = $this->getClassesFromElement($accordionItem);
        if (!in_array('accordion-item', $accordionItemClasses)) {
          continue;
        }
        $accordionItemClasses[] = 'tab-content';
        $accordionItem->setAttribute('class', implode(' ', $accordionItemClasses));
        $accordionCollapseId = $accordionId . '-content' . ($accordionItemCount);
        $isCollapsed = TRUE;
        foreach ($accordionItem->childNodes as $childItem) {
          if (!($childItem instanceof \DOMElement)) {
            continue;
          }
          $childItemClasses = $this->getClassesFromElement($childItem);
          if (in_array('accordion-header', $childItemClasses)) {
            $headerId = $accordionId . '-title' . ($accordionItemCount);
            $childItem->setAttribute('id', $headerId);
            foreach ($childItem->childNodes as $accordionButton) {
              if ($accordionButton instanceof \DOMElement && ($accordionButtonClasses = $this->getClassesFromElement($accordionButton)) && in_array('accordion-button', $accordionButtonClasses)) {
                $accordionButton->setAttribute('role', 'button');
                $accordionButton->setAttribute('data-bs-toggle', 'collapse');
                $accordionButton->setAttribute('data-bs-target', '#' . $accordionCollapseId);
                $isCollapsed = in_array('collapsed', $accordionButtonClasses);
                $accordionButton->setAttribute('aria-expanded', $isCollapsed ? 'false' : 'true');
                $accordionButton->setAttribute('aria-controls', $accordionCollapseId);
                $accordionButtonClasses[] = 'expandableHeaders';
                if ($isCollapsed) {
                  $accordionButtonClasses[] = 'collapsed';
                }
                $accordionButton->setAttribute('class', implode(' ', $accordionButtonClasses));
                if ($accordionButton->hasAttribute('href')) {
                  $accordionButton->setAttribute('href', '#' . $accordionCollapseId);
                }
                // Add ID to button based on its text content
                $buttonId = strtolower(preg_replace('/[^a-zA-Z0-9-]/', '-', trim($accordionButton->textContent)));
                $accordionButton->setAttribute('id', $buttonId);
              }
            }
          }
          elseif (in_array('collapse', $childItemClasses)) {
            $childItem->setAttribute('id', $accordionCollapseId);
            $childItemClasses = array_diff($childItemClasses, ['collapse']);
            $childItemClasses[] = 'accordion-collapse';
            $childItemClasses[] = 'collapse';
            if (!$isCollapsed) {
              $childItemClasses[] = 'show';
            }
            $childItem->setAttribute('class', implode(' ', $childItemClasses));
            $childItem->setAttribute('aria-labelledby', $accordionId . '-title' . ($accordionItemCount));
            $childItem->setAttribute('data-bs-parent', '#' . $accordionId);
            
            // Wrap accordion body content in a div
            foreach ($childItem->childNodes as $accordionBody) {
              if ($accordionBody instanceof \DOMElement && in_array('accordion-body', $this->getClassesFromElement($accordionBody))) {
                $contentDiv = $dom->createElement('div');
                while ($accordionBody->hasChildNodes()) {
                  $contentDiv->appendChild($accordionBody->firstChild);
                }
                $accordionBody->appendChild($contentDiv);
              }
            }
          }
        }
        $accordionItemCount++;
      }
    }

    $result->setProcessedText(Html::serialize($dom));

    return $result;
  }

  /**
   * Gets the classes from a DOMElement as an array of strings.
   *
   * @param \DOMElement $element
   *   The element.
   *
   * @return string[]
   *   The element's CSS classes.
   */
  protected function getClassesFromElement(\DOMElement $element) {
    if (!$element->hasAttribute('class')) {
      return [];
    }
    return preg_split('/\s+/', $element->getAttribute('class'));
  }

} 